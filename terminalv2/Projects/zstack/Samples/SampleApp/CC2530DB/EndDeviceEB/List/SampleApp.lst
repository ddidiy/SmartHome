###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                26/Jan/2015  11:41:40
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\Source\SampleApp.c"
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D LIVING_ROOM -D DEBUG_STAGE -D
#        xDEV_CORE -D DEV_LIGHT -lC "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"
#        -lA "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\" -I
#        "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\SampleApp.lst
#    Object file        =  
#        F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\SampleApp.r51
#
###############################################################################

F:\zigbee project\terminalv2\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "mt_uart.h"//´®¿ÚÍ·ÎÄ¼þ
     75          #include "MT_APP.H"
     76          #include "MT.h"//CMD_SERIAL_MSGÈÎÎñIDÔÚÕâÀï¶¨ÒåµÄ
     77          #include <ioCC2530.h>
     78          #include <stdlib.h>
     79          /************±àÒëÐ­µ÷ÕßµÄÊ±ºòÐèÒª½«×¢ÊÍÈ¥µô**********/
     80          //#define DEV_COOR
     81          //#define DEBUG_STAGE
     82          /*****************************/
     83          #ifndef DEV_COOR
     84          #include "ds18b20.H"
     85          #endif
     86          /**********************¶¨ÒåÃüÁî******************************/
     87          #ifndef CMD_H
     88          #define CMD_H
     89          
     90          /***¶¨ÒåÃüÁîµÄÀàÐÍCmdType****/
     91          #define CMD_TYPE_CLOSELINK             0x00         /*¶Ï¿ªÁ¬½Ó*/
     92          #define CMD_TYPE_QUERYREQUEST          0x01         /*²éÑ¯ÇëÇó*/
     93          #define CMD_TYPE_QUERYRESPONSE         0x02         /*²éÑ¯Ó¦´ð*/
     94          #define CMD_TYPE_CONTROLREQUEST        0x03         /*¿ØÖÆÇëÇó*/
     95          #define CMD_TYPE_CONTROLRESPONSE       0x04         /*¿ØÖÆÓ¦´ø*/
     96          /***cmdÃüÁî²Ù×÷ÀàÐÍCmdCtrlType*/
     97          #define CMD_CONTROL_OPEN               0x00     // ´ò¿ª 
     98          #define CMD_CONTROL_CLOSE              0x01     // ¹Ø±Õ
     99          #define CMD_CONTROL_WRITE              0x02     // Ð´ 
    100          #define CMD_CONTROL_READ               0x03     // ¶Á 
    101          #define CMD_CONTROL_START              0x04     // ¿ªÊ¼ 
    102          #define CMD_CONTROL_STOP               0x05     // ½áÊø
    103          /*
    104          CmdCtrlValue     0x00 - 0xff
    105          */
    106          /***¶¨Òå·¿¼äID CmdRoomId***/
    107          #define CMD_ROOM_LIVINGROOM             0x00       //¿ÍÌü
    108          #define CMD_ROOM_BEDROOM                0x01       //ÎÔÊÒ
    109          #define CMD_ROOM_KITCHEN                0x02       //³ø·¿
    110          /**cmdÉè±¸ÀàÐÍ¶¨ÒåCmdDevType
    111            ÔÚÕâÀïÏÈ¶¨Òå
    112            */
    113          #define CMD_DEV_LED                0x00      // µÆ
    114          #define CMD_DEV_CURTAIN            0x01      //´°Á±
    115          #define CMD_DEV_TEMPERATURE        0x02       //ÎÂ¶È
    116          #define CMD_DEV_LIGHTINTENSITY     0x03       //¹âÏßÇ¿¶È
    117          #define CMD_DEV_AIR                0x04       //ÑÌÎí
    118          #define CMD_DEV_WINDOWMAGNETIC     0x05       //´°´Å
    119          #define CMD_DEV_DOORBELL           0x06       //ÃÅÁå
    120          #define CMD_DEV_OUTPUT             0x07       //Êä³öÔ¤Áô
    121          #define CMD_DEV_INPUT              0x08       //ÊäÈëÔ¤Áô
    122            
    123          /**ÃüÁîµÄÀàÐÍ**/
    124          #define  CmdFlag         0                             /*Ö¡Í·*/                        //0x7f
    125          #define  CmdType         1                             /* ÃüÁîÀàÐÍ */
    126          #define  CmdCtrlType     2                             /* ÃüÁî¿ØÖÆµÄÀàÐÍ */
    127          #define  CmdCtrlValue    3                             /* ÃüÁîÖµ */
    128          #define  CmdRoomId       4                             /* ·¿¼äºÅ */
    129          #define  CmdDevType      5                             /* Éè±¸ÀàÐÍ */
    130          #define  CmdDevId        6                             /* Éè±¸ºÅ */
    131          /***************************************
    132          CmdDevId 0x00 - 0xff
    133          
    134          ¶¨ÒåµÄÊýÄ¿Ä£ÐÍÎª 7f 0X 0X 0X 0X 0X 0X
    135          **************************************/
    136          #define  CMD_LEN         7                 //Ò»¹²ÊÇ7¸ö16Î»½øÖÆ             
    137          #endif
    138          /*****************************ÒÔÉÏÎªCMD******************************************/
    139          /*********×Ô´øled¶¨Òå**********/
    140          #define LED1    HAL_LED_1  //×Ô´øµÄLED          ¿ØÖÆµÄ¾ÍÊÇ P1.0
    141          #define LED2    HAL_LED_2                            //   p1.1
    142          #define LED3    HAL_LED_3                      //²»ÒªÊ¹ÓÃ    P1.3         
    143          #define LED_ON  HAL_LED_MODE_ON  //Êä³öÎª¸ßµçÆ½
    144          #define LED_OFF HAL_LED_MODE_OFF
    145          /*********************¸÷Éè±¸¹¦ÄÜÄ£¿é¶¨Òå************************
    146          µÚÒ»²½£ºÔÚÕâÀïÌí¼ÓÍâÉèµÄÐÅÏ¢²¢ÉèÖÃÏàÓ¦µÄ¶¯×÷*/
    147          /*****************************************************************
    148              ¹¦ÄÜÊµÏÖ£ºDEV_LIGHT          µÆ      P0.0   Êä³ö 
    149                                                   P0.1   Êä³ö
    150                                                   P0.4   Êä³ö
    151                        DEV_CURTAIN       ´°Á±     P0.5   Êä³ö
    152                        DEV_TEMPERATURE    ÎÂ¶È    P0.6   ÊäÈë
    153                        DEV_LIGHT         ¹âÇ¿     P0.7   ÊäÈë
    154                        DEV_IAR          ÑÌÎí      P1.2   ÊäÈë
    155                   DEV_WINDOWMAGNETIC     ´°´Å     P1.5   ÊäÈë
    156                      DEV_DOORBELL        ÃÅÁå     P2.0   ÖÐ¶Ï 
    157                    DEV_OUTPUT            Êä³öÔ¤Áô  P1.6 P1.7
    158                    DEV_INPUT             ÊäÈëÔ¤Áô  p2.3 p2.4
    159          ***************************************************************/
    160          //µÆ P0.4 Êä³ö
    161          #ifdef  DEV_LIGHT
    162            #define DEV_LIGHT1_OPEN()        do{P0_0 = 1;}while(0);
    163            #define DEV_LIGHT1_CLOSE()       do{P0_0 = 0;}while(0);
    164            #define DEV_LIGHT1_BIT           (P0_0)
    165            #define DEV_LIGHT2_OPEN()        do{P0_1 = 1;}while(0);
    166            #define DEV_LIGHT2_CLOSE()       do{P0_1 = 0;}while(0);
    167            #define DEV_LIGHT2_BIT           (P0_1)
    168            #define DEV_LIGHT3_OPEN()        do{P0_4 = 1;}while(0);
    169            #define DEV_LIGHT3_CLOSE()       do{P0_4 = 0;}while(0);
    170            #define DEV_LIGHT3_BIT           (P0_4)
    171          #endif
    172          //´°Á± P0.5 Êä³ö
    173          #ifdef  DEV_CURTAIN
    174            #define DEV_CURTAIN_OPEN()       do{P0_5 = 1;}while(0);
    175            #define DEV_CURTAIN_CLOSE()      do{P0_5 = 0;}while(0);
    176            #define DEV_CURTAIN_BIT          (P0_5)
    177          #endif
    178          
    179          
    180           //¹âÇ¿ p0.7
    181          #ifdef DEV_LIGHTINTENSITY
    182            #define DEV_LIGHTINTENSITY_BIT            (P0_7)
    183          #endif
    184             //ÑÌÎí p1.2
    185          #ifdef DEV_IAR
    186            #define  DEV_IAR_BIT               (P1_2)
    187          #endif
    188             //´°´Å p1.5
    189          #ifdef DEV_WINDOWMAGNETIC
    190            #define  DEV_WINDOWMAGNETIC_BIT     (P1_5)
    191          #endif
    192             //ÃÅÁå p2.0
    193          #ifdef DEV_DOORBELL
    194          #define DEV_DOORBELL_BIT             (P2_0)
    195          #endif
    196          //Ô¤ÁôÊä³ö p1.6 1.7
    197          #ifdef DEV_OUTPUT
    198           #define DEV_OUTPUT1_OPEN()      do{P1_6 = 1;}while(0);
    199           #define DEV_OUTPUT1_CLOSE()      do{P1_6 = 0;}while(0);
    200           #define DEV_OUTPUT1_BIT            (P1_6)
    201           #define DEV_OUTPUT2_OPEN()      do{P1_7 = 1;}while(0);
    202           #define DEV_OUTPUT2_CLOSE()      do{P1_7 = 0;}while(0);
    203           #define DEV_OUTPUT2_BIT            (P1_7)
    204          #endif
    205             //Ô¤ÁôÊäÈë p2.3 p2.4
    206          #ifdef DEV_OUTPUT
    207           #define DEV_OUTPUT1_OPEN()      do{P1_6 = 1;}while(0);
    208           #define DEV_OUTPUT1_CLOSE()      do{P1_6 = 0;}while(0);
    209           #define DEV_OUTPUT1_BIT            (P1_6)
    210           #define DEV_OUTPUT2_OPEN()      do{P1_7 = 1;}while(0);
    211           #define DEV_OUTPUT2_CLOSE()      do{P1_7 = 0;}while(0);
    212           #define DEV_OUTPUT2_BIT            (P1_7)
    213          #endif
    214             //Ô¤ÁôÊäÈë 
    215          #ifdef DEV_INPUT
    216             #define DEV_INPUT1_BIT            (P2_3)
    217             #define DEV_INPUT2_BIT            (P2_4)
    218          #endif
    219          /*****************¹¦ÄÜÄ£¿é¶¨Òå½áÊø**************************/
    220          
    221          /***¶¨ÒåÌØÓÐµÄ·¿¼äºÅ**/
    222          /********************************************
    223              LIVING_ROOM         ¿ÍÌü
    224              BED_ROOM            ÎÔÊÒ
    225              KITCHEN_ROOM        ³ø·¿
    226          *******************************************/
    227          #ifndef DEV_COOR
    228              // #error  outdev_coor
    229               #ifdef  LIVING_ROOM     //¿ÍÌü
    230               #define ROOM_NUM   CMD_ROOM_LIVINGROOM //°Ñ·¿¼äºÅ¶¨ÒåÎª¿ÍÌü
    231               #endif
    232               #ifdef BED_ROOM         //ÎÔÊÒ
    233                 #define ROOM_NUM CMD_ROOM_BEDROOM
    234               #endif 
    235               #ifdef KITCHEN_ROOM      //³ø·¿
    236                 #define ROOM_NUM CMD_ROOM_KITCHEN
    237               #endif
    238               #define DEV_NUM 1
    239          #endif
    240          /***********************************************************/
    241          /******************¶¨Òå·¿¼äÊýÁ¿ÓëÉè±¸µÄÊëÁÏ***************/
    242          #ifdef DEV_COOR
    243          
    244            //#error  indev_coor
    245          
    246            #define ROOM_COUNT 3
    247            #define DEV_COUNT 1
    248          #endif
    249          /********************************************************/
    250          
    251          //¶¨Òå±êÖ¾¶«Î÷
    252          #define FRAME_FLAG  (0x7f)   //Êý¾Ý¿ò¼ÜÅÐ¶Ï
    253          #define ERROR_FLAG  (0x6f)   
    254          /*********************************************************************
    255           * MACROS
    256           */
    257          
    258          /*********************************************************************
    259           * CONSTANTS
    260           */
    261          
    262          /*********************************************************************
    263           * TYPEDEFS
    264           */
    265          
    266          /*********************************************************************
    267           * GLOBAL VARIABLES
    268           */
    269          
    270          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    271          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    272          {
    273            SAMPLEAPP_PERIODIC_CLUSTERID,
    274            SAMPLEAPP_FLASH_CLUSTERID
    275          };
    276          

   \                                 In  segment XDATA_ROM_C, align 1
    277          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    278          {
    279            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    280            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    281            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    282            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    283            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    284            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    285            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    286            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    287            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    288          };
    289          
    290          // This is the Endpoint/Interface description.  It is defined here, but
    291          // filled-in in SampleApp_Init().  Another way to go would be to fill
    292          // in the structure here and make it a "const" (in code space).  The
    293          // way it's defined in this sample app it is define in RAM.
    294          
    295          
    296          
    297          
    298          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    299          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    300          #ifndef DEV_COOR

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    301             int DoorBellPressed = 0;//ÃÅÁå
   \                     DoorBellPressed:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    302          #endif
    303          
    304          
    305          
    306          /*********************************************************************
    307           * EXTERNAL VARIABLES
    308           */
    309          
    310          /*********************************************************************
    311           * EXTERNAL FUNCTIONS
    312           */
    313          
    314          /*********************************************************************
    315           * LOCAL VARIABLES
    316           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    317          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    318                                    // This variable will be received when
    319                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    320          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    321          #ifdef DEBUG_STAGE          //debugÄ£Ê½Ìá¹©ASCII±àÂë

   \                                 In  segment XDATA_I, align 1, keep-with-next
    322                 uint8 asc_16[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   \                     asc_16:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for asc_16>`
   \   000010                REQUIRE __INIT_XDATA_I
    323          #endif      

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    324          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    325          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    326          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    327          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    328          /**×Ô¼º¶¨ÒåµÄµã¶ÔµãµÄ´«Êä**/
    329          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    330            afAddrType_t SampleApp_Point_to_Point_DstAddr;
   \                     SampleApp_Point_to_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    331          
    332          /**************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    333          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    334          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    335          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    336          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    337          /*******Â·ÓÉ±íµ¥********/
    338          #ifdef DEV_COOR
    339            uint16 Routing_Table[ROOM_COUNT][DEV_COUNT]={0};
    340          #endif
    341          
    342          //unsigned char temp_bank = 0;
    343          /************/
    344          /*********************************************************************
    345           * LOCAL FUNCTIONS
    346           */
    347          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    348          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    349          void SampleApp_SendPeriodicMessage( void );
    350          void SampleApp_SendFlashMessage( uint16 flashTime );
    351          
    352          /***my funtions**/
    353          #ifdef DEV_COOR
    354            void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);//´®¿Ú½ÓÊÜµ½Êý¾Ý´¦Àíº¯ÊýµÄÉêÃ÷
    355          #endif
    356            //void P1_ISR(void);
    357          /*********************************************************************
    358           * NETWORK LAYER CALLBACKS
    359           */
    360          
    361          /*********************************************************************
    362           * PUBLIC FUNCTIONS
    363           */
    364          
    365          /*********************************************************************
    366           * @fn      SampleApp_Init
    367           *
    368           * @brief   Initialization function for the Generic App Task.
    369           *          This is called during initialization and should contain
    370           *          any application specific initialization (ie. hardware
    371           *          initialization/setup, table initialization, power up
    372           *          notificaiton ... ).
    373           *
    374           * @param   task_id - the ID assigned by OSAL.  This ID should be
    375           *                    used to send messages and set timers.
    376           *
    377           * @return  none
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    381            SampleApp_TaskID = task_id; //ÈÎÎñID
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    382            SampleApp_NwkState = DEV_INIT;//ÍøÂçÀàÐÍ
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    383            SampleApp_TransID = 0;// ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·,
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    384            /*****´®¿Ú³õÊ¼»¯******/
    385            MT_UartInit ();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay  ; Banked call to: MT_UartInit
    386            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay; Banked call to: MT_UartRegisterTaskID
    387          
    388            #ifndef DEV_COOR
    389              #ifdef DEBUG_STAGE
    390                #ifdef LIVING_ROOM
    391                 HalUARTWrite(0,"livingroom\n",11);
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0B         MOV     R4,#0xb
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "livingroom\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "livingroom\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    392                #endif
    393                #ifdef BED_ROOM
    394                 HalUARTWrite(0,"bedroom\n",8);
    395                #endif
    396                #ifdef KIT_ROOM
    397                 HalUARTWrite(0,"kitroom\n",8);
    398                #endif
    399              #endif
    400            #endif
    401          
    402            /******************ÖÕ¶ËÉè±¸¸÷Ä£¿éio³õÊ¼»¯*******************/
    403            /*
    404                 µÚ¶þ²½£ºÕâÀïÌí¼ÓÐèÒªµÄÉèÖÃµÄIO³õÊ¼»¯
    405            ***********************************************************/
    406          #ifndef DEV_COOR
    407              //µÆ P0.0 1 4 Êä³ö
    408             #ifdef  DEV_LIGHT
    409                 P0SEL &= 0xec;//µÆ1ÅäÖÃI/O¿Ú  P0_0
   \   00002B   53F3EC       ANL     0xf3,#0xec
    410                 P0DIR |= 0x13;//LIGHT1 Êä³ö
   \   00002E   43FD13       ORL     0xfd,#0x13
    411                 P0_0 = 0;
   \   000031   C280         CLR     0x80.0
    412                 P0_1 = 0;
   \   000033   C281         CLR     0x80.1
    413                 P0_4 = 0;      
   \   000035   C284         CLR     0x80.4
    414             #endif
    415           //´°Á± P0.5 Êä³ö  
    416             #ifdef DEV_CURTAIN
    417                P0SEL &= 0xDF;
    418                P0DIR |= 0x40;  //Êä³ö  
    419                P0_5 = 0;
    420             #endif
    421                //ÎÂ¶È P0.6
    422             #ifdef DEV_TEMPERATURE
    423                P0SEL &= 0xbf;         //DS18B20µÄio¿Ú³õÊ¼»¯ÎÂ¶È³õÊ¼»¯
    424                Temp_test();//²âÊÔÎÂ¶È
    425             #endif
    426               //¹âÇ¿ P0.7
    427             #ifdef DEV_LIGHTINTENSITY
    428                P0SEL &= 0x7f;
    429                P0DIR &= 0x7f;
    430             #endif 
    431                //ÑÌÎí P1.2
    432             #ifdef DEV_AIR
    433                P1SEL &= 0xfb;
    434                P1DIR &= 0xfb;  //ÊäÈë
    435             #endif
    436                //´°´Å P1.5
    437             #ifdef DEV_WINDOWMAGNETIC
    438                P1SEL &= 0xef;
    439                P1DIR &= 0xef;
    440                P1INP &= 0xef;
    441             #endif
    442                //ÃÅÁå p2.0
    443             #ifdef DEV_DOORBELL   
    444            
    445             #endif
    446                //output
    447             #ifdef DEV_OUTPUT
    448                P1SEL &= 0x3f;
    449                P1DIR |= 0xc0;
    450             #endif
    451                //input
    452             #ifdef DEV_INPUT
    453               P2SEL  &= 0xf9;
    454               P2DIR  &= 0xe7;
    455             #endif
    456          #endif
    457          /************IO³õÊ¼»¯½áÊø**********************/
    458                
    459            // Device hardware initialization can be added here or in main() (Zmain.c).
    460            // If the hardware is application specific - add it here.
    461            // If the hardware is other parts of the device add it in main().
    462          
    463           #if defined ( BUILD_ALL_DEVICES )
    464            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    465            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    466            // together - if they are - we will start up a coordinator. Otherwise,
    467            // the device will start as a router.
    468            if ( readCoordinatorJumper() )
    469              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    470            else
    471              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    472          #endif // BUILD_ALL_DEVICES
    473          
    474          #if defined ( HOLD_AUTO_START )
    475            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    476            //  from starting the device and wait for the application to
    477            //  start the device.
    478            ZDOInitDevice(0);
    479          #endif
    480          
    481            // Setup for the periodic message's destination address
    482            // Broadcast to everyone
    483            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000037   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00003A   740F         MOV     A,#0xf
   \   00003C   F0           MOVX    @DPTR,A
    484            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003D   A3           INC     DPTR
   \   00003E   7414         MOV     A,#0x14
   \   000040   F0           MOVX    @DPTR,A
    485            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000041   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000044   74FF         MOV     A,#-0x1
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
    486          
    487            // Setup for the flash command's destination address - Group 1
    488            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000049   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00004C   7401         MOV     A,#0x1
   \   00004E   F0           MOVX    @DPTR,A
    489            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    490            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000053   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
    491          /***Éè¶¨µã¶ÔµãµÄµØÖ··½°¸****/
    492            SampleApp_Point_to_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00005C   90....       MOV     DPTR,#SampleApp_Point_to_Point_DstAddr + 8
   \   00005F   7402         MOV     A,#0x2
   \   000061   F0           MOVX    @DPTR,A
    493            SampleApp_Point_to_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000062   A3           INC     DPTR
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    494            SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0xffff;//Êý¾Ý´ÓÖÕ¶Ë·¢¸øÐ­µ÷Õß
   \   000066   90....       MOV     DPTR,#SampleApp_Point_to_Point_DstAddr
   \   000069   74FF         MOV     A,#-0x1
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
    495          /********************************/
    496            // Fill out the endpoint description.
    497            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006E   90....       MOV     DPTR,#SampleApp_epDesc
   \   000071   7414         MOV     A,#0x14
   \   000073   F0           MOVX    @DPTR,A
    498            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    499            SampleApp_epDesc.simpleDesc
    500                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000083   F0           MOVX    @DPTR,A
    501            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000084   A3           INC     DPTR
   \   000085   E4           CLR     A
   \   000086   F0           MOVX    @DPTR,A
    502          
    503            // Register the endpoint description with the AF
    504            afRegister( &SampleApp_epDesc );
   \   000087                ; Setup parameters for call to function afRegister
   \   000087   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000089   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00008B   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    505          
    506            // Register for all key events - This app will handle all key events
    507            RegisterForKeys( SampleApp_TaskID );
   \   00008E                ; Setup parameters for call to function RegisterForKeys
   \   00008E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    508          
    509            // By default, all devices start out in Group 1
    510            SampleApp_Group.ID = 0x0001;
   \   000096   90....       MOV     DPTR,#SampleApp_Group
   \   000099   7401         MOV     A,#0x1
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    511            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00009F                ; Setup parameters for call to function osal_memcpy
   \   00009F   75....       MOV     ?V0,#`?<Constant "Group 1">` & 0xff
   \   0000A2   75....       MOV     ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A5   F5..         MOV     ?V2,A
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   7C07         MOV     R4,#0x7
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000B2   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000B4   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    512            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000BC                ; Setup parameters for call to function aps_AddGroup
   \   0000BC   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000BE   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C0   7914         MOV     R1,#0x14
   \   0000C2   12....       LCALL   ??aps_AddGroup?relay ; Banked call to: aps_AddGroup
    513          
    514          #if defined ( LCD_SUPPORTED )
    515            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    516          #endif
    517          }
   \   0000C5   7F03         MOV     R7,#0x3
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000CA                REQUIRE P0SEL
   \   0000CA                REQUIRE P0DIR
   \   0000CA                REQUIRE _A_P0
    518          
    519          /*********************************************************************
    520           * @fn      SampleApp_ProcessEvent ÈÎÎñ´¦Àíº¯Êý¡£ÈÎÎñ´¦Àíº¯ÊýÊÇ¶ÔÈÎÎñ·¢ÉúºóµÄÊÂ¼þ½øÐÐ´¦Àí
    521           *
    522           * @brief   Generic Application Task event processor.  This function
    523           *          is called to process all events for the task.  Events
    524           *          include timers, messages and any other user defined events.
    525           *
    526           * @param   task_id  - The OSAL assigned task ID.
    527           * @param   events - events to process.  This is a bit map and can
    528           *                   contain more than one event.
    529           *
    530           * @return  none
    531           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )//·¢ËÍ´¦Àíº¯Êý
   \                     SampleApp_ProcessEvent:
    533          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    534            afIncomingMSGPacket_t *MSGpkt;
    535            #ifndef DEV_COOR//´æ·Å¼ÓÈëÍøÂçµÄÊý¾Ý
    536               uint8 buffer[4];
    537            #endif
    538            (void)task_id;  // Intentionally unreferenced parameter
    539          
    540            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    541            {
    542              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    543              while ( MSGpkt )
    544              {
    545                switch ( MSGpkt->hdr.event )
    546                {
    547          #ifdef DEV_COOR
    548                  case CMD_SERIAL_MSG://´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨ÒåMTÏà¹ØÄÚÈÝ£¬ /***Õâ¸öº¯ÊýÊÇÀ´×ÔµçÄÔµÄ´®¿ÚÊý¾Ý´¦Àíº¯Êý***/
    549                     SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);//´®¿ÚÊÕµ½ÐÅÏ¢ºó£¬ÊÂ¼þºÅ CMD_SERIAL_MSG ¾Í»á±»µÇ¼Ç£¬±ã½øÈë CMD_SERIAL_MSG: Ö´ÐÐ SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);         
    550                     break;
    551          #endif
    552                      
    553                  // Received when a key is pressed
    554                  case KEY_CHANGE:
    555                    //°´¼ü·¢ËÍ¸Ä±ä
    556                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    557                    break;
    558          
    559                  // Received when a messages is received (OTA) for this endpoint
    560                  case AF_INCOMING_MSG_CMD:
    561                    SampleApp_MessageMSGCB( MSGpkt );
    562                    break;
    563          
    564                  // Received whenever the device changes state in the network
    565                  case ZDO_STATE_CHANGE://ÍøÂç³öÏÖ×´Ì¬»ú·¢Éú±ä»¯
    566                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00001D   F0           MOVX    @DPTR,A
    567                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)||//Ð­µ÷Õß²»¸ø×Ô¼ºµã²¥
    568                         //(SampleApp_NwkState == DEV_ROUTER)|| //Ð­µ÷Õß²»¸øÂ·ÓÉµã²¥
    569                        (SampleApp_NwkState == DEV_END_DEVICE))
   \   00001E   6406         XRL     A,#0x6
   \   000020   707D         JNZ     ??SampleApp_ProcessEvent_3
    570                    {
    571           #ifndef DEV_COOR//ÖÕ¶ËÏòÐ­µ÷Æ÷·¢ËÍ¼ÓÈëÍøÂçµÄÊý¾Ý°ü Êý¾Ý°ü¸ñÊ½Îª    m ·¿¼äºÅ£¨ROOM_NUM£© Éè±¸ºÅ£¨DEV_NUM£© g
    572                      buffer[0] = 'm';
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   746D         MOV     A,#0x6d
   \   00002A   F0           MOVX    @DPTR,A
    573                      buffer[1] = ROOM_NUM;//          
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
    574                      buffer[2] = DEV_NUM;
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7401         MOV     A,#0x1
   \   000039   F0           MOVX    @DPTR,A
    575                      buffer[3] = 'g';
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   7467         MOV     A,#0x67
   \   000041   F0           MOVX    @DPTR,A
    576                      SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   \   000042   90....       MOV     DPTR,#SampleApp_Point_to_Point_DstAddr
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
    577                      if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr,
    578                                 &SampleApp_epDesc,
    579                                 SAMPLEAPP_ADDNET_CLUSTERID,
    580                                 4,
    581                                 buffer,
    582                                 &SampleApp_TransID,
    583                                 AF_DISCV_ROUTE | AF_ACK_REQUEST,
    584                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000049                ; Setup parameters for call to function AF_DataRequest
   \   000049   75..1E       MOV     ?V2,#0x1e
   \   00004C   78..         MOV     R0,#?V2
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75....       MOV     ?V2,#SampleApp_TransID & 0xff
   \   000054   75....       MOV     ?V3,#(SampleApp_TransID >> 8) & 0xff
   \   000057   78..         MOV     R0,#?V2
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?XSTACK_DISP100_8
   \   000061   88..         MOV     ?V2,R0
   \   000063   89..         MOV     ?V3,R1
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   75..04       MOV     ?V2,#0x4
   \   00006D   75..00       MOV     ?V3,#0x0
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   75..05       MOV     ?V2,#0x5
   \   000078   78..         MOV     R0,#?V2
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7930         MOV     R1,#0x30
   \   00007F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000081   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000083   7A..         MOV     R2,#SampleApp_Point_to_Point_DstAddr & 0xff
   \   000085   7B..         MOV     R3,#(SampleApp_Point_to_Point_DstAddr >> 8) & 0xff
   \   000087   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   00008A   7409         MOV     A,#0x9
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   E9           MOV     A,R1
   \   000090   700D         JNZ     ??SampleApp_ProcessEvent_3
    585                             {
    586                                #ifdef DEBUG_STAGE
    587                                         HalUARTWrite(0,"Init EndPoint\n\r",sizeof("Init EndPoint\n\r"));
   \   000092                ; Setup parameters for call to function HalUARTWrite
   \   000092   7C10         MOV     R4,#0x10
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7A..         MOV     R2,#`?<Constant "Init EndPoint\\n\\r">` & 0xff
   \   000098   7B..         MOV     R3,#(`?<Constant "Init EndPoint\\n\\r">` >> 8) & 0xff
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    588                                       //HalLedSet(LED1,LED_ON);
    589                                #endif 
    590                             }
    591                          else
    592                            {
    593                            // Error occurred in request to send.
    594                             }
    595                      /*****Ô­º¯Êý±»×¢ÊÍ
    596                      // Start sending the periodic message in a regular interval.
    597                      osal_start_timerEx( SampleApp_TaskID,
    598                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    599                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    600                      */
    601          #endif
    602                    }
    603                    else
    604                    {
    605                      // Device is no longer in the network
    606                    }
    607                    break;
    608          
    609                  default:
    610                    break;
    611                }
    612          
    613                // Release the memory
    614                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   00009F                ; Setup parameters for call to function osal_msg_deallocate
   \   00009F   AA..         MOV     R2,?V0
   \   0000A1   AB..         MOV     R3,?V1
   \   0000A3   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    615          
    616                // Next - if one is available
    617                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   0000A6                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   0000A6   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   E5..         MOV     A,?V0
   \   0000B4   45..         ORL     A,?V1
   \   0000B6   601D         JZ      ??SampleApp_ProcessEvent_4
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   24E6         ADD     A,#-0x1a
   \   0000C1   6009         JZ      ??SampleApp_ProcessEvent_5
   \   0000C3   2449         ADD     A,#0x49
   \   0000C5   7003         JNZ     $+5
   \   0000C7   02....       LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
   \   0000CA   80D3         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   0000CC                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0   12....       LCALL   ??SampleApp_MessageMSGCB?relay; Banked call to: SampleApp_MessageMSGCB
   \   0000D3   80CA         SJMP    ??SampleApp_ProcessEvent_3
    618              }
    619          
    620              // return unprocessed events
    621              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   FA           MOV     R2,A
   \   0000D7   EF           MOV     A,R7
   \   0000D8   6480         XRL     A,#0x80
   \   0000DA   8021         SJMP    ??SampleApp_ProcessEvent_6
    622            }
    623          
    624            // Send a message out - This event is generated by a timer
    625            //  (setup in SampleApp_Init()).
    626            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )//¼ÓÈëÍøÂçºóÒ»Ö±ÔÚÖ´ÐÐÕâ¸ö×´Ì¬
   \                     ??SampleApp_ProcessEvent_0:
   \   0000DC   EE           MOV     A,R6
   \   0000DD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DF   501F         JNC     ??SampleApp_ProcessEvent_7
    627            {
    628              // Send the periodic message
    629              SampleApp_SendPeriodicMessage();
    630              /**********ÐÞ¸ÄÊ¹ÓÃµÄº¯Êý********/
    631              //SampleApp_PointToPointMessage();
    632              /******/
    633              // Setup to send message again in normal period (+ a little jitter)
    634              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    635                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   0000E1                ; Setup parameters for call to function osal_rand
   \   0000E1   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   0000E4                ; Setup parameters for call to function osal_start_timerEx
   \   0000E4   EA           MOV     A,R2
   \   0000E5   2488         ADD     A,#-0x78
   \   0000E7   FC           MOV     R4,A
   \   0000E8   E4           CLR     A
   \   0000E9   3413         ADDC    A,#0x13
   \   0000EB   FD           MOV     R5,A
   \   0000EC   7A01         MOV     R2,#0x1
   \   0000EE   7B00         MOV     R3,#0x0
   \   0000F0   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
    636          
    637              // return unprocessed events
    638              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000F8   EE           MOV     A,R6
   \   0000F9   6401         XRL     A,#0x1
   \   0000FB   FA           MOV     R2,A
   \   0000FC   EF           MOV     A,R7
   \                     ??SampleApp_ProcessEvent_6:
   \   0000FD   FB           MOV     R3,A
   \   0000FE   8004         SJMP    ??SampleApp_ProcessEvent_8
    639            }
    640          
    641            // Discard unknown events
    642            return 0;
   \                     ??SampleApp_ProcessEvent_7:
   \   000100   7A00         MOV     R2,#0x0
   \   000102   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000104   7404         MOV     A,#0x4
   \   000106                REQUIRE ?Subroutine0
   \   000106                ; // Fall through to label ?Subroutine0
    643          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    644          
    645          /*********************************************************************
    646           * Event Generation Functions
    647           */
    648          /*********************************************************************
    649           * @fn      SampleApp_HandleKeys
    650           *
    651           * @brief   Handles all key events for this device.ËùÓÐ°´¼ü´¦Àíº¯Êý
    652           *
    653           * @param   shift - true if in shift/alt.
    654           * @param   keys - bit field for key events. Valid entries:
    655           *                 HAL_KEY_SW_2
    656           *                 HAL_KEY_SW_1
    657           *
    658           * @return  none
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    661          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    662            (void)shift;  // Intentionally unreferenced parameter
    663            
    664            if ( keys & HAL_KEY_SW_1 )
    665            {
    666              /* This key sends the Flash Command is sent to Group 1.
    667               * This device will not receive the Flash Command from this
    668               * device (even if it belongs to group 1).
    669               */
    670               #ifdef DEV_DOORBELL
    671                 DoorBellPressed =1;
    672               #endif
    673              //HalLedBlink(HAL_LED_1,2,50,500);//
    674             // SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    675            }
    676          
    677            if ( keys & HAL_KEY_SW_2 )
    678            {
    679              /* The Flashr Command is sent to Group 1.
    680               * This key toggles this device in and out of group 1.
    681               * If this device doesn't belong to group 1, this application
    682               * will not receive the Flash command sent to group 1.
    683               */
    684              /*
    685              aps_Group_t *grp;
    686              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    687              if ( grp )
    688              {
    689                // Remove from the group
    690                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    691              }
    692              else
    693              {
    694                // Add to the flash group
    695                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    696              }
    697            }
    698              */
    699            }
    700          }
   \   000000   02....       LJMP    ?BRET
    701          
    702          /*********************************************************************
    703           * LOCAL FUNCTIONS
    704           */
    705          
    706          /*********************************************************************
    707           * @fn      SampleApp_MessageMSGCB½ÓÊÕ´¦Àíº¯Êý¡£
    708           *
    709           * @brief   Data message processor callback.  This function processes
    710           *          any incoming data - probably from other devices.  So, based
    711           *          on cluster ID, perform the intended action.
    712           *
    713           * @param   none
    714           *
    715           * @return  none
    716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    717          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )//½ÓÊÜÊý¾Ý´¦Àíº¯Êý
   \                     SampleApp_MessageMSGCB:
    718          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    719           // uint16 flashTime;
    720            uint8 *str = NULL; 
    721            #ifndef DEV_COOR
    722               uint8 reply_buf[CMD_LEN]; //reply_buf[7]
    723               #ifdef DEBUG_STAGE
    724                 int i;
    725               #endif
    726            #endif
    727            #ifdef DEV_COOR
    728                uint8 buffer[4];//ÓÃÓÚ´¦ÀíÓ¦´ð
    729                uint16 shortaddr;//ÓÃÀ´´æ·Å¶ÌµØÖ·
    730            #endif
    731            str = pkt->cmd.Data;
   \   00000E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
    732            switch ( pkt->clusterId )
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V3,A
   \   000025   78..         MOV     R0,#?V2
   \   000027   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002A   0300         DW        3
   \   00002C   02           DB        2
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000033   ....         DW        ??SampleApp_MessageMSGCB_2
    733            {
    734              /***×Ô¼ºÌí¼ÓµÄÌõ¼þ·ÖÖ§***/
    735              /*****
    736              µÚÈý²½£ºÌí¼Ó×Ô¼ºµÄ×´Ì¬»ú
    737              ******/
    738              case SAMPLEAPP_POINT_TO_POINT_CLUSTERID:
    739                #ifndef DEV_COOR                         
    740                    #ifdef DEBUG_STAGE
    741                       for(i=0;i<CMD_LEN;i++)
   \                     ??SampleApp_MessageMSGCB_1:
   \   000035   75..00       MOV     ?V2,#0x0
   \   000038   75..00       MOV     ?V3,#0x0
    742                       HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_MessageMSGCB_3:
   \   00003B                ; Setup parameters for call to function HalUARTWrite
   \   00003B   7C01         MOV     R4,#0x1
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   EE           MOV     A,R6
   \   000040   25..         ADD     A,?V2
   \   000042   FA           MOV     R2,A
   \   000043   EF           MOV     A,R7
   \   000044   35..         ADDC    A,?V3
   \   000046   FB           MOV     R3,A
   \   000047   7900         MOV     R1,#0x0
   \   000049   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
   \   00004C   05..         INC     ?V2
   \   00004E   E5..         MOV     A,?V2
   \   000050   7002         JNZ     ??SampleApp_MessageMSGCB_4
   \   000052   05..         INC     ?V3
   \                     ??SampleApp_MessageMSGCB_4:
   \   000054   C3           CLR     C
   \   000055   9407         SUBB    A,#0x7
   \   000057   E5..         MOV     A,?V3
   \   000059   9400         SUBB    A,#0x0
   \   00005B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005D   65D0         XRL     A,PSW
   \   00005F   33           RLC     A
   \   000060   40D9         JC      ??SampleApp_MessageMSGCB_3
    743                    #endif 
    744                      HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2ÁÁ ±íÊ¾µÃµ½ÃüÁî
   \   000062                ; Setup parameters for call to function HalLedSet
   \   000062   7A01         MOV     R2,#0x1
   \   000064   7902         MOV     R1,#0x2
   \   000066   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
    745                      if(str[CmdFlag] == FRAME_FLAG && pkt->srcAddr.addr.shortAddr == 0x0000)   //È·ÈÏÖ¡Í·ºÍÔ´µØÖ· 
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   647F         XRL     A,#0x7f
   \   000070   6003         JZ      $+5
   \   000072   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   000075   85..82       MOV     DPL,?V0
   \   000078   85..83       MOV     DPH,?V1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   E8           MOV     A,R0
   \   000087   49           ORL     A,R1
   \   000088   6003         JZ      $+5
   \   00008A   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    746                      {
    747                        reply_buf[CmdFlag] = FRAME_FLAG;//¿ò¼ÜÅÐ¶Ï
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   747F         MOV     A,#0x7f
   \   000095   12....       LCALL   ?Subroutine3 & 0xFFFF
    748                        switch(str[CmdDevType])
   \                     ??CrossCallReturnLabel_6:
   \   000098   6003         JZ      $+5
   \   00009A   02....       LJMP    ??SampleApp_MessageMSGCB_5 & 0xFFFF
    749                        {
    750                          /************************µÆ******************/
    751                          #ifdef DEV_LIGHT
    752                            case CMD_DEV_LED:
    753                              if(str[CmdType] == CMD_TYPE_CONTROLREQUEST)//ÊÇ·ñÎª¿ØÖÆ
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   6403         XRL     A,#0x3
   \   0000A5   7061         JNZ     ??SampleApp_MessageMSGCB_6
    754                               {
    755                                    switch(str[CmdCtrlType])//ÃüÁî¿ØÖÆµÄÀàÐÍ
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6005         JZ      ??SampleApp_MessageMSGCB_7
   \   0000B0   14           DEC     A
   \   0000B1   6022         JZ      ??SampleApp_MessageMSGCB_8
   \   0000B3   8043         SJMP    ??SampleApp_MessageMSGCB_9
    756                                    {
    757                                          case CMD_CONTROL_OPEN:
    758                                                        {
    759                                                            reply_buf[CmdCtrlValue] = 1; 
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   12....       LCALL   ?Subroutine1 & 0xFFFF
    760                                                            switch(str[CmdDevId])
   \                     ??CrossCallReturnLabel_0:
   \   0000BF   6008         JZ      ??SampleApp_MessageMSGCB_10
   \   0000C1   14           DEC     A
   \   0000C2   6009         JZ      ??SampleApp_MessageMSGCB_11
   \   0000C4   14           DEC     A
   \   0000C5   600A         JZ      ??SampleApp_MessageMSGCB_12
   \   0000C7   802B         SJMP    ??SampleApp_MessageMSGCB_13
    761                                                            {
    762                                                               case 0:
    763                                                                  DEV_LIGHT1_OPEN()
   \                     ??SampleApp_MessageMSGCB_10:
   \   0000C9   D280         SETB    0x80.0
    764                                                                  break;
   \   0000CB   8033         SJMP    ??SampleApp_MessageMSGCB_14
    765                                                               case 1:
    766                                                                  DEV_LIGHT2_OPEN()
   \                     ??SampleApp_MessageMSGCB_11:
   \   0000CD   D281         SETB    0x80.1
    767                                                                  break;
   \   0000CF   802F         SJMP    ??SampleApp_MessageMSGCB_14
    768                                                               case 2:
    769                                                                  DEV_LIGHT3_OPEN()
   \                     ??SampleApp_MessageMSGCB_12:
   \   0000D1   D284         SETB    0x80.4
    770                                                                  break;
   \   0000D3   802B         SJMP    ??SampleApp_MessageMSGCB_14
    771                                                               default:
    772                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
    773                                                            }
    774                                                        }
    775                                         break;
    776                                         case CMD_CONTROL_CLOSE:
    777                                                      {
    778                                                         reply_buf[CmdCtrlValue] = 0; 
   \                     ??SampleApp_MessageMSGCB_8:
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E4           CLR     A
   \   0000DB   12....       LCALL   ?Subroutine1 & 0xFFFF
    779                                                         switch(str[CmdDevId])
   \                     ??CrossCallReturnLabel_1:
   \   0000DE   6008         JZ      ??SampleApp_MessageMSGCB_15
   \   0000E0   14           DEC     A
   \   0000E1   6009         JZ      ??SampleApp_MessageMSGCB_16
   \   0000E3   14           DEC     A
   \   0000E4   600A         JZ      ??SampleApp_MessageMSGCB_17
   \   0000E6   800C         SJMP    ??SampleApp_MessageMSGCB_13
    780                                                            {
    781                                                               case 0:
    782                                                                  DEV_LIGHT1_CLOSE()
   \                     ??SampleApp_MessageMSGCB_15:
   \   0000E8   C280         CLR     0x80.0
    783                                                                  break;
   \   0000EA   8014         SJMP    ??SampleApp_MessageMSGCB_14
    784                                                               case 1:
    785                                                                  DEV_LIGHT2_CLOSE()
   \                     ??SampleApp_MessageMSGCB_16:
   \   0000EC   C281         CLR     0x80.1
    786                                                                  break;
   \   0000EE   8010         SJMP    ??SampleApp_MessageMSGCB_14
    787                                                               case 2:
    788                                                                  DEV_LIGHT3_CLOSE()
   \                     ??SampleApp_MessageMSGCB_17:
   \   0000F0   C284         CLR     0x80.4
    789                                                                  break;
   \   0000F2   800C         SJMP    ??SampleApp_MessageMSGCB_14
    790                                                               default:
    791                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
   \                     ??SampleApp_MessageMSGCB_13:
   \   0000F4   7403         MOV     A,#0x3
   \   0000F6   8002         SJMP    ??SampleApp_MessageMSGCB_18
    792                                                            }
    793                                                      }
    794                                         break;
    795                                         default:
    796                                               reply_buf[CmdCtrlType] = ERROR_FLAG;   
   \                     ??SampleApp_MessageMSGCB_9:
   \   0000F8   7402         MOV     A,#0x2
   \                     ??SampleApp_MessageMSGCB_18:
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   746F         MOV     A,#0x6f
   \   0000FF   F0           MOVX    @DPTR,A
    797                                    }
    798                                    reply_buf[CmdType] = CMD_TYPE_CONTROLRESPONSE; 
   \                     ??SampleApp_MessageMSGCB_14:
   \   000100   7401         MOV     A,#0x1
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   7404         MOV     A,#0x4
   \   000107   F0           MOVX    @DPTR,A
    799                               }                  
    800                              else if(str[CmdType] == CMD_TYPE_CONTROLREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)//²éÑ¯
    801                              {
    802                                switch(str[CmdDevId])
    803                                {
    804                                  case 0:
    805                                      if(DEV_LIGHT1_BIT)
    806                                         reply_buf[CmdCtrlValue] = 1;
    807                                      else
    808                                         reply_buf[CmdCtrlValue] = 0;
    809                                  break;
    810                                 case 1:
    811                                      if(DEV_LIGHT2_BIT)
    812                                         reply_buf[CmdCtrlValue] = 1;
    813                                      else
    814                                         reply_buf[CmdCtrlValue] = 0;
    815                                   break;
    816                                 case 2:
    817                                      if(DEV_LIGHT3_BIT)
    818                                         reply_buf[CmdCtrlValue] = 1;
    819                                      else
    820                                         reply_buf[CmdCtrlValue] = 0;
    821                                   break;
    822                                  default:
    823                                       reply_buf[CmdCtrlValue] = ERROR_FLAG;  
    824                                }
    825                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
    826                              }
    827                              reply_buf[CmdDevType] = CMD_DEV_LED;
   \                     ??SampleApp_MessageMSGCB_6:
   \   000108   7405         MOV     A,#0x5
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
    828                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   7402         MOV     A,#0x2
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   D0E0         POP     A
   \   00011F   12....       LCALL   ?Subroutine1 & 0xFFFF
    829                              reply_buf[CmdDevId] = str[CmdDevId];
   \                     ??CrossCallReturnLabel_2:
   \   000122   C0E0         PUSH    A
   \   000124   7406         MOV     A,#0x6
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   D0E0         POP     A
   \   00012B   F0           MOVX    @DPTR,A
    830                              reply_buf[CmdRoomId] = ROOM_NUM;
   \   00012C   7404         MOV     A,#0x4
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E4           CLR     A
   \   000132   F0           MOVX    @DPTR,A
    831                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   \   000133   90....       MOV     DPTR,#SampleApp_Point_to_Point_DstAddr
   \   000136   12....       LCALL   ?Subroutine4 & 0xFFFF
    832                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
    833                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    834                                     CMD_LEN,
    835                                     reply_buf,
    836                                     &SampleApp_TransID,
    837                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
    838                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_8:
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013C   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   00013F   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000142   78..         MOV     R0,#?V0
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   7403         MOV     A,#0x3
   \   000149   12....       LCALL   ?XSTACK_DISP100_8
   \   00014C   88..         MOV     ?V0,R0
   \   00014E   89..         MOV     ?V1,R1
   \   000150   78..         MOV     R0,#?V0
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000155   75..07       MOV     ?V0,#0x7
   \   000158   75..00       MOV     ?V1,#0x0
   \   00015B   78..         MOV     R0,#?V0
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   75..03       MOV     ?V0,#0x3
   \   000163   78..         MOV     R0,#?V0
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000168   7930         MOV     R1,#0x30
   \   00016A   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00016C   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00016E   7A..         MOV     R2,#SampleApp_Point_to_Point_DstAddr & 0xff
   \   000170   7B..         MOV     R3,#(SampleApp_Point_to_Point_DstAddr >> 8) & 0xff
   \   000172   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000175   7409         MOV     A,#0x9
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017A   E9           MOV     A,R1
   \   00017B   7003         JNZ     $+5
   \   00017D   02....       LJMP    ??SampleApp_MessageMSGCB_19 & 0xFFFF
    839                                  {
    840                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    841                                  }
    842                             else
    843                              {
    844                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    845                                    // Error occurred in request to send.
    846                               }
    847                            break;
    848                       #endif
    849                            /**************************´°Á±*************************************/
    850                       #ifdef DEV_CURTAIN
    851                            case CMD_DEV_CURTAIN:
    852                              if(str[CmdType] == CMD_TYPE_CONTROLREQUEST)//ÊÇ·ñÎª¿ØÖÆ
    853                               {
    854                                    switch(str[CmdCtrlType])//ÃüÁî¿ØÖÆµÄÀàÐÍ
    855                                    {
    856                                          case CMD_CONTROL_OPEN:
    857                                                        {
    858                                                            reply_buf[CmdCtrlValue] = 1; 
    859                                                            switch(str[CmdDevId])
    860                                                            {
    861                                                               case 0:
    862                                                                  DEV_CURTAIN_OPEN()
    863                                                                  break;
    864                                                               default:
    865                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
    866                                                            }
    867                                                        }
    868                                         break;
    869                                         case CMD_CONTROL_CLOSE:
    870                                                      {
    871                                                         reply_buf[CmdCtrlValue] = 0; 
    872                                                         switch(str[CmdDevId])
    873                                                            {
    874                                                               case 0:
    875                                                                  DEV_CURTAIN_CLOSE()
    876                                                                  break;
    877                                                               default:
    878                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
    879                                                            }
    880                                                      }
    881                                         break;
    882                                         default:
    883                                               reply_buf[CmdCtrlType] = ERROR_FLAG;   
    884                                    }
    885                                    reply_buf[CmdType] = CMD_TYPE_CONTROLRESPONSE; 
    886                               }                  
    887                              else if(str[CmdType] == CMD_TYPE_CONTROLREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)//²éÑ¯
    888                              {
    889                                switch(str[CmdDevId])
    890                                {
    891                                  case 0:
    892                                      if(DEV_CURTAIN_BIT)
    893                                         reply_buf[CmdCtrlValue] = 1;
    894                                      else
    895                                         reply_buf[CmdCtrlValue] = 0;
    896                                  break;
    897                                  default:
    898                                       reply_buf[CmdCtrlValue] = ERROR_FLAG;  
    899                                }
    900                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
    901                              }
    902                              reply_buf[CmdDevType] = CMD_DEV_LED;
    903                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
    904                              reply_buf[CmdDevId] = str[CmdDevId];
    905                              reply_buf[CmdRoomId] = ROOM_NUM;
    906                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
    907                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
    908                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    909                                     CMD_LEN,
    910                                     reply_buf,
    911                                     &SampleApp_TransID,
    912                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
    913                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    914                                  {
    915                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    916                                  }
    917                             else
    918                              {
    919                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    920                                    // Error occurred in request to send.
    921                               }
    922                            break;
    923                       #endif
    924                        /*******************************************ÎÂ¶È**********************************************/
    925                    #ifdef DEV_TEMPERATURE
    926                     case  CMD_DEV_TEMPERATURE:
    927                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
    928                    {
    929                     // P0SEL &= 0xbf;         //DS18B20µÄio¿Ú³õÊ¼»¯
    930                      switch(str[CmdDevId])
    931                        {
    932                          case 0:
    933                            Temp_test();
    934                         break;
    935                         default:
    936                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
    937                                }
    938                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
    939                         }
    940                              reply_buf[CmdDevType] = CMD_DEV_TEMPERATURE;
    941                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
    942                              reply_buf[CmdDevId] = str[CmdDevId];
    943                              reply_buf[CmdRoomId] = ROOM_NUM;
    944                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
    945                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
    946                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    947                                     CMD_LEN,
    948                                     reply_buf,
    949                                     &SampleApp_TransID,
    950                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
    951                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    952                                  {
    953                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    954                                  }
    955                             else
    956                              {
    957                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    958                                    // Error occurred in request to send.
    959                               }
    960                            break;
    961                   #endif
    962                             /*******************************************¹âÇ¿**********************************************/
    963                   #ifdef DEV_LIGHTINTENSITY
    964                            case  CMD_DEV_LIGHTINTENSITY:
    965                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
    966                    {
    967                   
    968                      switch(str[CmdDevId])
    969                        {
    970                          case 0:
    971                            if(DEV_LIGHTINTENSITY_BIT)
    972                               reply_buf[CmdCtrlValue] = 1;
    973                            else
    974                               reply_buf[CmdCtrlValue] = 0;
    975                          break;
    976                         default:
    977                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
    978                                }
    979                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
    980                         }
    981                              reply_buf[CmdDevType] = CMD_DEV_LIGHTINTENSITY;
    982                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
    983                              reply_buf[CmdDevId] = str[CmdDevId];
    984                              reply_buf[CmdRoomId] = ROOM_NUM;
    985                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
    986                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
    987                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    988                                     CMD_LEN,
    989                                     reply_buf,
    990                                     &SampleApp_TransID,
    991                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
    992                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    993                                  {
    994                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    995                                  }
    996                             else
    997                              {
    998                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
    999                                    // Error occurred in request to send.
   1000                               }
   1001                            break;
   1002                   #endif    
   1003                                 /*******************************************ÑÌÎí**********************************************/
   1004                   #ifdef DEV_AIR
   1005                            case  CMD_DEV_AIR:
   1006                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
   1007                    {
   1008                   
   1009                      switch(str[CmdDevId])
   1010                        {
   1011                          case 0:
   1012                            if(DEV_AIR_BIT)
   1013                               reply_buf[CmdCtrlValue] = 1;
   1014                            else
   1015                               reply_buf[CmdCtrlValue] = 0;
   1016                          break;
   1017                         default:
   1018                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
   1019                                }
   1020                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
   1021                         }
   1022                              reply_buf[CmdDevType] = CMD_DEV_AIR;
   1023                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   1024                              reply_buf[CmdDevId] = str[CmdDevId];
   1025                              reply_buf[CmdRoomId] = ROOM_NUM;
   1026                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1027                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1028                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1029                                     CMD_LEN,
   1030                                     reply_buf,
   1031                                     &SampleApp_TransID,
   1032                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1033                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1034                                  {
   1035                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1036                                  }
   1037                             else
   1038                              {
   1039                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1040                                    // Error occurred in request to send.
   1041                               }
   1042                            break;
   1043                   #endif 
   1044                            /******************************´°´Å*************************************/
   1045                   #ifdef DEV_WINDOWMAGNETIC
   1046                      case  CMD_DEV_WINDOWMAGNETIC:
   1047                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
   1048                    {
   1049                   
   1050                      switch(str[CmdDevId])
   1051                        {
   1052                          case 0:
   1053                            if(DEV_WINDOWMAGNETIC_BIT)
   1054                               reply_buf[CmdCtrlValue] = 1;
   1055                            else
   1056                               reply_buf[CmdCtrlValue] = 0;
   1057                          break;
   1058                         default:
   1059                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
   1060                                }
   1061                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
   1062                         }
   1063                              reply_buf[CmdDevType] = CMD_DEV_WINDOWMAGNETIC;
   1064                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   1065                              reply_buf[CmdDevId] = str[CmdDevId];
   1066                              reply_buf[CmdRoomId] = ROOM_NUM;
   1067                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1068                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1069                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1070                                     CMD_LEN,
   1071                                     reply_buf,
   1072                                     &SampleApp_TransID,
   1073                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1074                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1075                                  {
   1076                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1077                                  }
   1078                             else
   1079                              {
   1080                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1081                                    // Error occurred in request to send.
   1082                               }
   1083                            break;
   1084                   #endif
   1085                   /******************************ÃÅÁå*************************************/
   1086                   #ifdef DEV_DOORBELL 
   1087                      case  CMD_DEV_DOORBELL:
   1088                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
   1089                    {
   1090                   
   1091                      switch(str[CmdDevId])
   1092                        {
   1093                          case 0:
   1094                            if(DEV_DOORBELL_BIT == 0)
   1095                               reply_buf[CmdCtrlValue] = 0;
   1096                            else
   1097                            {
   1098                                 reply_buf[CmdCtrlValue] = 1;
   1099                                 DoorBellPressed = 0;
   1100                            }
   1101                          break;
   1102                         default:
   1103                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
   1104                                }
   1105                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
   1106                         }
   1107                              reply_buf[CmdDevType] = CMD_DEV_DOORBELL;
   1108                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   1109                              reply_buf[CmdDevId] = str[CmdDevId];
   1110                              reply_buf[CmdRoomId] = ROOM_NUM;
   1111                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1112                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1113                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1114                                     CMD_LEN,
   1115                                     reply_buf,
   1116                                     &SampleApp_TransID,
   1117                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1118                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1119                                  {
   1120                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1121                                  }
   1122                             else
   1123                              {
   1124                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1125                                    // Error occurred in request to send.
   1126                               }
   1127                            break;
   1128                   #endif  
   1129                             /************************Êä³öÔ¤Áô******************/
   1130                          #ifdef DEV_OUTPUT
   1131                            case CMD_DEV_OUTPUT:
   1132                              if(str[CmdType] == CMD_TYPE_CONTROLREQUEST)//ÊÇ·ñÎª¿ØÖÆ
   1133                               {
   1134                                    switch(str[CmdCtrlType])//ÃüÁî¿ØÖÆµÄÀàÐÍ
   1135                                    {
   1136                                          case CMD_CONTROL_OPEN:
   1137                                                        {
   1138                                                            reply_buf[CmdCtrlValue] = 1; 
   1139                                                            switch(str[CmdDevId])
   1140                                                            {
   1141                                                               case 0:
   1142                                                                  DEV_OUTPUT1_OPEN()
   1143                                                                  break;
   1144                                                               case 1:
   1145                                                                  DEV_OUTPUT2_OPEN()
   1146                                                                  break;
   1147                                                               default:
   1148                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
   1149                                                            }
   1150                                                        }
   1151                                         break;
   1152                                         case CMD_CONTROL_CLOSE:
   1153                                                      {
   1154                                                         reply_buf[CmdCtrlValue] = 0; 
   1155                                                         switch(str[CmdDevId])
   1156                                                            {
   1157                                                               case 0:
   1158                                                                  DEV_OUTPUT1_CLOSE()
   1159                                                                  break;
   1160                                                               case 1:
   1161                                                                  DEV_OUTPUT2_CLOSE()
   1162                                                                  break;
   1163                                                               default:
   1164                                                                      reply_buf[CmdCtrlValue] = ERROR_FLAG;
   1165                                                            }
   1166                                                      }
   1167                                         break;
   1168                                         default:
   1169                                               reply_buf[CmdCtrlType] = ERROR_FLAG;   
   1170                                    }
   1171                                    reply_buf[CmdType] = CMD_TYPE_CONTROLRESPONSE; 
   1172                               }                  
   1173                              else if(str[CmdType] == CMD_TYPE_CONTROLREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)//²éÑ¯
   1174                              {
   1175                                switch(str[CmdDevId])
   1176                                {
   1177                                  case 0:
   1178                                      if(DEV_OUTPUT1_BIT)
   1179                                         reply_buf[CmdCtrlValue] = 1;
   1180                                      else
   1181                                         reply_buf[CmdCtrlValue] = 0;
   1182                                  break;
   1183                                 case 1:
   1184                                      if(DEV_OUTPUT2_BIT)
   1185                                         reply_buf[CmdCtrlValue] = 1;
   1186                                      else
   1187                                         reply_buf[CmdCtrlValue] = 0;
   1188                                   break;
   1189                                
   1190                                  default:
   1191                                       reply_buf[CmdCtrlValue] = ERROR_FLAG;  
   1192                                }
   1193                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
   1194                              }
   1195                              reply_buf[CmdDevType] = CMD_DEV_OUTPUT;
   1196                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   1197                              reply_buf[CmdDevId] = str[CmdDevId];
   1198                              reply_buf[CmdRoomId] = ROOM_NUM;
   1199                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1200                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1201                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1202                                     CMD_LEN,
   1203                                     reply_buf,
   1204                                     &SampleApp_TransID,
   1205                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1206                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1207                                  {
   1208                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1209                                  }
   1210                             else
   1211                              {
   1212                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1213                                    // Error occurred in request to send.
   1214                               }
   1215                            break;
   1216                       #endif
   1217                              /******************************ÊäÈëÔ¤Áô*************************************/
   1218                   #ifdef DEV_INPUT
   1219                      case  CMD_DEV_INPUT:
   1220                    if(str[CmdType] == CMD_TYPE_QUERYREQUEST && str[CmdCtrlType] == CMD_CONTROL_READ)
   1221                    {
   1222                   
   1223                      switch(str[CmdDevId])
   1224                        {
   1225                          case 0:
   1226                            if(DEV_INPUT_BIT1)
   1227                               reply_buf[CmdCtrlValue] = 1;
   1228                            else
   1229                               reply_buf[CmdCtrlValue] = 0;
   1230                          break;
   1231                          case 1:
   1232                            if(DEV_INPUT_BIT2)
   1233                               reply_buf[CmdCtrlValue] = 1;
   1234                            else
   1235                               reply_buf[CmdCtrlValue] = 0;
   1236                          break;
   1237                         default:
   1238                                    reply_buf[CmdCtrlValue] = ERROR_FLAG;  
   1239                                }
   1240                                reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE; 
   1241                         }
   1242                              reply_buf[CmdDevType] = CMD_DEV_INPUT;
   1243                              reply_buf[CmdCtrlType] = str[CmdCtrlType];
   1244                              reply_buf[CmdDevId] = str[CmdDevId];
   1245                              reply_buf[CmdRoomId] = ROOM_NUM;
   1246                              SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1247                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1248                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1249                                     CMD_LEN,
   1250                                     reply_buf,
   1251                                     &SampleApp_TransID,
   1252                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1253                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1254                                  {
   1255                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1256                                  }
   1257                             else
   1258                              {
   1259                                    HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1260                                    // Error occurred in request to send.
   1261                               }
   1262                            break;
   1263                   #endif
   1264                        default://Ã»ÕÒµ½Éè±¸
   1265                          reply_buf[CmdType] = CMD_TYPE_QUERYRESPONSE;
   1266                          reply_buf[CmdCtrlType] = ERROR_FLAG;
   1267                          reply_buf[CmdCtrlValue]= ERROR_FLAG;
   1268                          reply_buf[CmdRoomId] = ROOM_NUM;
   1269                          reply_buf[CmdDevType] = str[CmdDevType];
   1270                          reply_buf[CmdDevId] = str[CmdDevId];
   1271                          SampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0x0000;
   1272                              if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1273                                     SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1274                                     CMD_LEN,
   1275                                     reply_buf,
   1276                                     &SampleApp_TransID,
   1277                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1278                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1279                                {
   1280                                     HalLedSet(LED2,LED_OFF);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   1281                                 }
   1282                             else
   1283                                {
   1284                                     HalLedSet(LED2,LED_ON);//ÖÕ¶Ëled2Ãð ±íÊ¾·¢ËÍÃüÁî³É¹¦
   \                     ??SampleApp_MessageMSGCB_20:
   \   000180                ; Setup parameters for call to function HalLedSet
   \   000180   7A01         MOV     R2,#0x1
   \   000182   02....       LJMP    ??SampleApp_MessageMSGCB_21 & 0xFFFF
   1285                                    // Error occurred in request to send.
   1286                                }
   \                     ??SampleApp_MessageMSGCB_5:
   \   000185   7401         MOV     A,#0x1
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   7402         MOV     A,#0x2
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   746F         MOV     A,#0x6f
   \   000192   F0           MOVX    @DPTR,A
   \   000193   7403         MOV     A,#0x3
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   746F         MOV     A,#0x6f
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   7404         MOV     A,#0x4
   \   00019D   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A0   E4           CLR     A
   \   0001A1   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A4   C0E0         PUSH    A
   \   0001A6   7405         MOV     A,#0x5
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   D0E0         POP     A
   \   0001AD   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001B0   C0E0         PUSH    A
   \   0001B2   7406         MOV     A,#0x6
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   D0E0         POP     A
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   90....       MOV     DPTR,#SampleApp_Point_to_Point_DstAddr
   \   0001BD   E4           CLR     A
   \   0001BE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C4   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   0001C7   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   0001CA   78..         MOV     R0,#?V0
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CF   7403         MOV     A,#0x3
   \   0001D1   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D4   88..         MOV     ?V0,R0
   \   0001D6   89..         MOV     ?V1,R1
   \   0001D8   78..         MOV     R0,#?V0
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   75..07       MOV     ?V0,#0x7
   \   0001E0   75..00       MOV     ?V1,#0x0
   \   0001E3   78..         MOV     R0,#?V0
   \   0001E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E8   75..03       MOV     ?V0,#0x3
   \   0001EB   78..         MOV     R0,#?V0
   \   0001ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F0   7930         MOV     R1,#0x30
   \   0001F2   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001F4   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001F6   7A..         MOV     R2,#SampleApp_Point_to_Point_DstAddr & 0xff
   \   0001F8   7B..         MOV     R3,#(SampleApp_Point_to_Point_DstAddr >> 8) & 0xff
   \   0001FA   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   0001FD   7409         MOV     A,#0x9
   \   0001FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000202   E9           MOV     A,R1
   \   000203   6003         JZ      $+5
   \   000205   02....       LJMP    ??SampleApp_MessageMSGCB_20 & 0xFFFF
   \                     ??SampleApp_MessageMSGCB_19:
   \   000208                ; Setup parameters for call to function HalLedSet
   \   000208   7A00         MOV     R2,#0x0
   \                     ??SampleApp_MessageMSGCB_21:
   \   00020A   7902         MOV     R1,#0x2
   \   00020C   8052         SJMP    ??SampleApp_MessageMSGCB_22
   1287                            break;
   1288                        }         
   1289                      }
   1290                #else//Ð­µ÷Æ÷½«ÓÉÖÕ¶Ë·µ»ØµÄ»ØÓ¦ÐÅÏ¢°ü·¢ËÍ¸øÉÏÎ»»ú
   1291                if(str[CmdType] == CMD_TYPE_QUERYRESPONSE || str[CmdType] == CMD_TYPE_CONTROLRESPONSE)
   1292                {
   1293                  HalUARTWrite(0,str,CMD_LEN);
   1294                }      
   1295                #endif
   1296              break;
   1297              /*************************/
   1298              case SAMPLEAPP_ADDNET_CLUSTERID://ÈëÍø´¦Àí
   1299                #ifdef DEV_COOR
   1300                    if(pkt->cmd.Data[0]=='m' && pkt->cmd.Data[3]=='g' && pkt->srcAddr.addr.shortAddr != 0)
   1301                    {
   1302                      HalLedSet(LED1,LED_ON);//Ð­µ÷Õßled1ÁÁ ±íÊ¾ÕÒµ½ÁËÍøÂç
   1303                      shortaddr = pkt->srcAddr.addr.shortAddr;//°ÑÊÕµ½µÄÖÕ¶ËµÄµØÖ·±£´æ
   1304                      Routing_Table[pkt->cmd.Data[1]][pkt->cmd.Data[2]] = shortaddr;  //¶ÔÓ¦µÄ·¿¼äÉè±¸µÄÂ·ÓÉ±í½¨Á¢                    
   1305                      #ifdef DEBUG_STAGE 
   1306                               HalUARTWrite(0,&asc_16[Routing_Table[pkt->cmd.Data[1]][pkt->cmd.Data[2]]/4096],1);
   1307                               HalUARTWrite(0,&asc_16[Routing_Table[pkt->cmd.Data[1]][pkt->cmd.Data[2]]%4096/256],1);
   1308                               HalUARTWrite(0,&asc_16[Routing_Table[pkt->cmd.Data[1]][pkt->cmd.Data[2]]%256/16],1);
   1309                               HalUARTWrite(0,&asc_16[Routing_Table[pkt->cmd.Data[1]][pkt->cmd.Data[2]]%16],1);
   1310                      #endif           
   1311                       buffer[0] = 'r';//½øÐÐ»Ø¸´          
   1312                       buffer[1] = 0;
   1313                       buffer[2] = 0;
   1314                       buffer[3] = 'a';
   1315                       SampleApp_Point_to_Point_DstAddr.addr.shortAddr = shortaddr;//²¢°ÑÓ¦´ðÐÅÏ¢·¢ËÍ¸øÖÕ¶Ë ÈëÍø³É¹¦
   1316                       if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr, &SampleApp_epDesc,
   1317                                     SAMPLEAPP_ADDNET_CLUSTERID,
   1318                                     4,
   1319                                     buffer,
   1320                                     &SampleApp_TransID,
   1321                                     AF_DISCV_ROUTE | AF_ACK_REQUEST,
   1322                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1323                      {
   1324                       //  HalUARTWrite(0,"get searchmsg\n\r",sizeof("get searchmsg\n\r"));      
   1325                       //  HalUARTWrite(0,"bind one end",12);
   1326                         HalLedSet(LED1,LED_OFF);//Ð­µ÷Õßled1µÆÃð ±íÊ¾ÔøÕÒµ½ÍøÂç
   1327                      }
   1328                      else
   1329                      {
   1330                        // Error occurred in request to send.
   1331                      }
   1332                   }
   1333              #else        //ÖÕ¶Ë´¦ÀíÈëÍøÓ¦´ð
   1334              
   1335               if((pkt->cmd.Data[0]=='r' && pkt->cmd.Data[3]=='a') && pkt->srcAddr.addr.shortAddr == 0x0000)
   \                     ??SampleApp_MessageMSGCB_2:
   \   00020E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000211   F583         MOV     DPH,A
   \   000213   8882         MOV     DPL,R0
   \   000215   E0           MOVX    A,@DPTR
   \   000216   6472         XRL     A,#0x72
   \   000218   7035         JNZ     ??SampleApp_MessageMSGCB_23
   \   00021A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00021D   A3           INC     DPTR
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   F583         MOV     DPH,A
   \   000221   8882         MOV     DPL,R0
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   6461         XRL     A,#0x61
   \   000229   7024         JNZ     ??SampleApp_MessageMSGCB_23
   \   00022B   8A82         MOV     DPL,R2
   \   00022D   8B83         MOV     DPH,R3
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F8           MOV     R0,A
   \   000237   A3           INC     DPTR
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \   00023A   E8           MOV     A,R0
   \   00023B   49           ORL     A,R1
   \   00023C   7011         JNZ     ??SampleApp_MessageMSGCB_23
   1336               {
   1337                #ifdef DEBUG_STAGE
   1338                  HalUARTWrite(0,"bind success",12);
   \   00023E                ; Setup parameters for call to function HalUARTWrite
   \   00023E   7C0C         MOV     R4,#0xc
   \   000240   7D00         MOV     R5,#0x0
   \   000242   7A..         MOV     R2,#`?<Constant "bind success">` & 0xff
   \   000244   7B..         MOV     R3,#(`?<Constant "bind success">` >> 8) & 0xff
   \   000246   7900         MOV     R1,#0x0
   \   000248   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
   1339                #endif
   1340                  HalLedSet(LED1,LED_ON);//ÕÒµ½ÍøÂç¾Í¿ªÆôLED1
   \   00024B                ; Setup parameters for call to function HalLedSet
   \   00024B   7A01         MOV     R2,#0x1
   \   00024D   800F         SJMP    ??SampleApp_MessageMSGCB_24
   1341               }
   1342               else
   1343               {
   1344                  #ifdef DEBUG_STAGE
   1345                      HalUARTWrite(0,"bind fail",9);
   \                     ??SampleApp_MessageMSGCB_23:
   \   00024F                ; Setup parameters for call to function HalUARTWrite
   \   00024F   7C09         MOV     R4,#0x9
   \   000251   7D00         MOV     R5,#0x0
   \   000253   7A..         MOV     R2,#`?<Constant "bind fail">` & 0xff
   \   000255   7B..         MOV     R3,#(`?<Constant "bind fail">` >> 8) & 0xff
   \   000257   7900         MOV     R1,#0x0
   \   000259   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
   1346                  #endif
   1347                  HalLedSet(LED1,LED_OFF);//Î´ÕÒµ½ÍøÂç¾Í¹Ø±ÕLED1
   \   00025C                ; Setup parameters for call to function HalLedSet
   \   00025C   7A00         MOV     R2,#0x0
   \                     ??SampleApp_MessageMSGCB_24:
   \   00025E   7901         MOV     R1,#0x1
   \                     ??SampleApp_MessageMSGCB_22:
   \   000260   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   1348               }
   1349               #endif
   1350                break;
   1351              case SAMPLEAPP_PERIODIC_CLUSTERID:
   1352                break;
   1353          
   1354              case SAMPLEAPP_FLASH_CLUSTERID:
   1355              /*  flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
   1356                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );*/
   1357                break;
   1358            }
   1359          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000263   7407         MOV     A,#0x7
   \   000265   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000268                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V0,#0x1e
   \   000006   78..         MOV     R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
   1360          
   1361          /*********************************************************************
   1362           * @fn      SampleApp_SendPeriodicMessage
   1363           *
   1364           * @brief   Send the periodic message.
   1365           *
   1366           * @param   none
   1367           *
   1368           * @return  none
   1369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1370          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
   1371          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1372            /*
   1373            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
   1374                                 SAMPLEAPP_PERIODIC_CLUSTERID,
   1375                                 1,
   1376                                 (uint8*)&SampleAppPeriodicCounter,
   1377                                 &SampleApp_TransID,
   1378                                 AF_DISCV_ROUTE,
   1379                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1380            {
   1381            }
   1382            else
   1383            {
   1384              // Error occurred in request to send.
   1385            }
   1386            */
   1387          }
   \   000000   02....       LJMP    ?BRET
   1388          
   1389          /*********************************************************************
   1390           * @fn      SampleApp_SendFlashMessage
   1391           *
   1392           * @brief   Send the flash message to group 1.
   1393           *
   1394           * @param   flashTime - in milliseconds
   1395           *
   1396           * @return  none
   1397           */
   1398          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1399          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
   1400          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1401            /*
   1402            uint8 buffer[3];
   1403            buffer[0] = (uint8)(SampleAppFlashCounter++);
   1404            buffer[1] = LO_UINT16( flashTime );
   1405            buffer[2] = HI_UINT16( flashTime );
   1406          
   1407            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
   1408                                 SAMPLEAPP_FLASH_CLUSTERID,
   1409                                 3,
   1410                                 buffer,
   1411                                 &SampleApp_TransID,
   1412                                 AF_DISCV_ROUTE,
   1413                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1414            {
   1415            }
   1416            else
   1417            {
   1418              // Error occurred in request to send.
   1419            }
   1420            */
   1421          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for asc_16>`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
   \   00000A   41           DB 65
   \   00000B   42           DB 66
   \   00000C   43           DB 67
   \   00000D   44           DB 68
   \   00000E   45           DB 69
   \   00000F   46           DB 70

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "livingroom\\n">`:
   \   000000   6C697669     DB "livingroom\012"
   \            6E67726F
   \            6F6D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Init EndPoint\\n\\r">`:
   \   000000   496E6974     DB "Init EndPoint\012\015"
   \            20456E64
   \            506F696E
   \            740A0D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "bind success">`:
   \   000000   62696E64     DB "bind success"
   \            20737563
   \            63657373
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "bind fail">`:
   \   000000   62696E64     DB "bind fail"
   \            20666169
   \            6C00    
   1422          
   1423          
   1424          /*********************************************************************
   1425           * @fn      SampleApp_SerialCMD
   1426           *
   1427           * @brief   ´®¿Ú¸øµÄÊý¾Ý´¦Àí
   1428           *
   1429           *
   1430           * @return  none
   1431           */
   1432          #ifdef DEV_COOR
   1433          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg) 
   1434          {
   1435            uint8 dev_num,len,*str = NULL;//lenÓÐÓÃµÄÊý¾Ý³¤¶È
   1436            str = (cmdMsg->msg+1);//Ö¸ÏòÕæÕýµÄÊý¾Ý
   1437            len = *(cmdMsg->msg);//Ö¸ÏòÊý¾ÝÍ· ¾ÍÊÇÓÐ¶àÉÙÊý¾Ý
   1438            /****************ÒÔÏÂÎª´®¿Ú´òÓ¡½ÓÊÕµ½µÄÊý¾Ý*/
   1439            #ifdef DEBUG_STAGE
   1440              int i;
   1441              for(i = 0; i <= len; i++)
   1442              HalUARTWrite(0,str+i,1);
   1443              HalUARTWrite(0,"\n",1);
   1444            #endif
   1445              /******·ÂÕÕµã¶ÔµãµÄ·¢ËÍÄ£Ê½***/
   1446              /*
   1447              afAddrType_t SampleApp_Point_to_Point_DstAddr;
   1448              SampleApp_Point_to_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   1449              SampleApp_Point_to_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   1450              ampleApp_Point_to_Point_DstAddr.addr.shortAddr = 0xffff;//Êý¾Ý´ÓÖÕ¶Ë·¢¸øÐ­µ÷Õß
   1451              */
   1452              if(str[CmdFlag] == FRAME_FLAG && len == CMD_LEN)//ÅÐ¶Ï¿ò¼ÜÓÐÃ»ÓÐÕýÈ· ³¤¶ÈÓÐÃ»ÓÐÕýÈ·
   1453              {
   1454                for(dev_num = 1; dev_num <= DEV_COUNT; dev_num++)
   1455                {
   1456                  if(Routing_Table[str[CmdRoomId]][dev_num] == 0)
   1457                  {
   1458                     str[CmdRoomId] = ERROR_FLAG;
   1459                     HalUARTWrite(0,str,CMD_LEN);
   1460                     return;
   1461                  }
   1462                 SampleApp_Point_to_Point_DstAddr.addr.shortAddr = Routing_Table[str[CmdRoomId]][dev_num];
   1463                       if ( AF_DataRequest( &SampleApp_Point_to_Point_DstAddr,
   1464                                 &SampleApp_epDesc,
   1465                                 SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
   1466                                 len,//Êý¾Ý³¤¶È
   1467                                 str,//Êý¾ÝÄÚÈÝ
   1468                                 &SampleApp_TransID,
   1469                                 AF_DISCV_ROUTE,
   1470                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1471                          {
   1472                            }
   1473                       else
   1474                       {
   1475                          // Error occurred in request to send.
   1476                       }
   1477               }
   1478           }
   1479          }
   1480          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   SampleApp_HandleKeys
      0     14   SampleApp_Init
        0     11   -> HalUARTWrite
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      1     44   SampleApp_MessageMSGCB
        0     28   -> AF_DataRequest
        0     19   -> HalLedSet
        0     19   -> HalUARTWrite
      0     25   SampleApp_ProcessEvent
        0     25   -> AF_DataRequest
        0     16   -> HalUARTWrite
        0     16   -> SampleApp_MessageMSGCB
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> osal_rand
        0     16   -> osal_start_timerEx
      0      0   SampleApp_SendFlashMessage
      0      0   SampleApp_SendPeriodicMessage


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "Group 1">
      16  ?<Constant "Init EndPoint\n\r">
      10  ?<Constant "bind fail">
      13  ?<Constant "bind success">
      12  ?<Constant "livingroom\n">
      16  ?<Initializer for asc_16>
       6  ??SampleApp_HandleKeys?relay
       6  ??SampleApp_Init?relay
       6  ??SampleApp_MessageMSGCB?relay
       6  ??SampleApp_ProcessEvent?relay
       6  ??SampleApp_SendFlashMessage?relay
       6  ??SampleApp_SendPeriodicMessage?relay
       8  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
       5  ?Subroutine3
       9  ?Subroutine4
      11  ?Subroutine5
      11  ?Subroutine6
       2  DoorBellPressed
       1  P0DIR
       1  P0SEL
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
       3  SampleApp_HandleKeys
     202  SampleApp_Init
     616  SampleApp_MessageMSGCB
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
      12  SampleApp_Point_to_Point_DstAddr
     262  SampleApp_ProcessEvent
       3  SampleApp_SendFlashMessage
       3  SampleApp_SendPeriodicMessage
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
       1  _A_P0
      16  asc_16

 
 1 147 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
    75 bytes in segment XDATA_ROM_C
    67 bytes in segment XDATA_Z
 
 1 199 bytes of CODE  memory
    75 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
    83 bytes of XDATA memory

Errors: none
Warnings: none
