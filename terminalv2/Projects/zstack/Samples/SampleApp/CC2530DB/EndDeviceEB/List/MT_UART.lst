###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                26/Jan/2015  11:41:35
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  F:\zigbee project\terminalv2\Components\mt\MT_UART.c
#    Command line       =  
#        -f "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "F:\zigbee
#        project\terminalv2\Components\mt\MT_UART.c" -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D LIVING_ROOM -D DEBUG_STAGE -D xDEV_COOE -D
#        DEV_LIGHT -D xDEV_CURTAIN -D xDEV_TEMPERATURE -D xDEV_LIGHTINTENSITY
#        -D xDEV_IAR -D xDEV_WINDOWMAGNETIC -D xDEV_DOORBELL -D xDEV_OUTPUT -D
#        xDEV_INPUT -lC "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"
#        -lA "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\" -I
#        "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\MT_UART.lst
#    Object file        =  
#        F:\zigbee
#        project\terminalv2\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\MT_UART.r51
#
###############################################################################

F:\zigbee project\terminalv2\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7440         MOV     A,#0x40
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV     A,#0xa
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7480         MOV     A,#-0x80
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV     A,#0x12
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7480         MOV     A,#-0x80
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7406         MOV     A,#0x6
   \   00004B   F0           MOVX    @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV     A,#0x16
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;//¶¨ÒåÁËZTOOL_P1ËùÒÔÊ¹ÓÃµÄÊÇMT_UartProcessZToolDataÕâ¸öº¯Êý
   \   000054   741B         MOV     A,#0x1b
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   74..         MOV     A,#??MT_UartProcessZToolData?relay & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   74..         MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
   \   00005F   F0           MOVX    @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000060                ; Setup parameters for call to function HalUARTOpen
   \   000060   AA..         MOV     R2,?XSP + 0
   \   000062   AB..         MOV     R3,?XSP + 1
   \   000064   7900         MOV     R1,#0x0
   \   000066   12....       LCALL   ??HalUARTOpen?relay  ; Banked call to: HalUARTOpen
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   000069   741D         MOV     A,#0x1d
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    153          }
   \   000009   80..         SJMP    ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           *********************************************/
    195          /* Õâ¸öº¯ÊýºÜ³¤£¬¾ßÌåËµÀ´¾ÍÊÇ°Ñ´®¿Ú·¢À´µÄÊý¾Ý°ü½øÐÐ´ò°ü£¬Ð£Ñé£¬Éú
    196          ³ÉÒ»¸öÏûÏ¢£¬·¢¸ø´¦ÀíÊý¾Ý°üµÄÈÎÎñ¡£Èç¹ûÄã¿´¹ý MT µÄÎÄµµ£¬Ó¦¸ÃÖªµÀÈç
    197          ¹ûÓÃ ZTOOL Í¨¹ý´®¿ÚÀ´¹µÍ¨Ð­ÒéÕ»£¬ÄÇÃ´·¢¹ýÀ´µÄ´®¿ÚÊý¾Ý¾ßÓÐÒÔÏÂ¸ñÊ½£º 
    198          0xFE, DataLength, CM0, CM1, Data payload, FCS 
    199          ·­Òë£º 0xFE£ºÊý¾ÝÖ¡Í· 
    200          DataLength£ºDatapayload µÄÊý¾Ý³¤¶È£¬ÒÔ×Ö½Ú¼Æ£¬µÍ×Ö½ÚÔÚÇ°£» 
    201          CM0£ºÃüÁîµÍ×Ö½Ú£» 
    202          CM1£ºÃüÁî¸ß×Ö½Ú£»(ZTOOL Èí¼þ¾ÍÊÇÍ¨¹ý·¢ËÍÒ»ÏµÁÐÃüÁî¸ø MT ÊµÏÖºÍ
    203          Ð­ÒéÕ»½»»¥) 
    204          Data payload£ºÊý¾ÝÖ¡¾ßÌåµÄÊý¾Ý£¬Õâ¸ö³¤¶ÈÊÇ¿É±äµÄ£¬µ«ÊÇÒªºÍ
    205          DataLength Ò»ÖÂ£» 
    206          FCS £ºÐ£ÑéºÍ£¬´Ó DataLength ×Ö½Ú¿ªÊ¼µ½ Data payload ×îºóÒ»¸ö×Ö½Ú
    207          ËùÓÐ×Ö½ÚµÄÒì»ò°´×Ö½Ú²Ù×÷£» 
    208          
    209          Ò²¾ÍÊÇËµ£¬Èç¹û PC »úÏëÍ¨¹ý´®¿Ú·¢ËÍÐÅÏ¢¸ø CC2530£¬ÓÉÓÚÊÇÊ¹ÓÃÄ¬ÈÏµÄ
    210          ´®¿Úº¯Êý£¬ËùÒÔÄú±ØÐë°´ÉÏÃæµÄ¸ñÊ½·¢ËÍ£¬·ñÔò CC2530 ÊÇÊÕ²»µ½ÈÎºÎ¶«Î÷µÄ£¬
    211          ÕâÒ²ÊÇÎÒÃÇ´ó¼ÒÔÚµ÷ÊÔ´®¿Ú½ÓÊÕÊ±Ò»Ö±´òÈ¦µÄµØ·½¡£¾¡¹ÜÕâ¸ö»úÖÆÊÇ·Ç³£ÍêÉÆ
    212          µÄ£¬Ò²ÄÜÐ£Ñé´®¿ÚÊý¾Ý£¬µ«ÊÇºÜÃ÷ÏÔ£¬ÎÒÃÇÐèÒªµÄÊÇ CC2530 ÄÜÖ±½Ó½ÓÊÕµ½´®¿Ú
    213          ÐÅÏ¢£¬È»ºóÒ»³É²»±äµÄ·¢³É³öÈ¥£¬ÏàÐÅÄãÔÚÁÄ QQ µÄÊ±ºòÒ²²»Ï£ÍûÔÚÃ¿¾ä»°Ç°Ãæ
    214          ¼Ó FE .. ..µÄÌØ¶¨×Ö·û°É£¬¶øÇÒ»¹Òª×Ô¼º¼ÆËãÐ£ÑéÂë¡£ 
    215           ***************************************************************************************************/
    216          /****
    217          void MT_UartProcessZToolData ( uint8 port, uint8 event )
    218          {
    219            uint8  ch;
    220            uint8  bytesInRxBuffer;
    221            
    222            (void)event;  // Intentionally unreferenced parameter
    223          
    224            while (Hal_UART_RxBufLen(port))
    225            {
    226              HalUARTRead (port, &ch, 1);//Ò»¸öÒ»¸öµØ¶Á£¬¶ÁÍêÒ»¸ö»º³åÇø¾ÍÇå 1 ¸öÁË£¬£¿ÎªÊ²Ã´ÕâÑùÄØ£¬ÍùÏÂ¿´ 
    227          
    228              switch (state)//×´Ì¬»ú
    229              {
    230                case SOP_STATE:
    231                  if (ch == MT_UART_SOF)//MT_UART_SOF µÄÖµÄ¬ÈÏÊÇ 0xFE,ËùÒÔÊý¾Ý±ØÐë FE ¸ñÊ½¿ªÊ¼·¢ËÍ²ÅÄÜ½øÈëÏÂ
    232          //Ò»¸ö×´Ì¬£¬²»È»ÓÀÔ¶ÔÚÕâÀï×ªÈ¦
    233                    state = LEN_STATE;
    234                  break;
    235          
    236                case LEN_STATE:
    237                  LEN_Token = ch;
    238          
    239                  tempDataLen = 0;
    240          
    241                // Allocate memory for the data //·ÖÅäÄÚ´æ¿Õ¼ä
    242                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    243                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    244          
    245                  if (pMsg)//Èç¹û·ÖÅä³É¹¦
    246                  {
    247                  // Fill up what we can 
    248                    pMsg->hdr.event = CMD_SERIAL_MSG;//×¢²áÊÂ¼þºÅCMD_SERIAL_MSG
    249                    pMsg->msg = (uint8*)(pMsg+1);//¶¨Î»Êý¾ÝÎ»ÖÃ
    250                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
    251                    state = CMD_STATE1;
    252                  }
    253                  else
    254                  {
    255                    state = SOP_STATE;
    256                    return;
    257                  }
    258                  break;
    259          
    260                case CMD_STATE1:
    261                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
    262                  state = CMD_STATE2;
    263                  break;
    264          
    265                case CMD_STATE2:
    266                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
    267                // If there is no data, skip to FCS state 
    268                  if (LEN_Token)
    269                  {
    270                    state = DATA_STATE;
    271                  }
    272                  else
    273                  {
    274                    state = FCS_STATE;
    275                  }
    276                  break;
    277          
    278                case DATA_STATE:
    279          
    280                  // Fill in the buffer the first byte of the data 
    281                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
    282          
    283                  //Check number of bytes left in the Rx buffer 
    284                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
    285          
    286                  // If the remain of the data is there, read them all, otherwise, just read enough 
    287                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
    288                  {
    289                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
    290                    tempDataLen += bytesInRxBuffer;
    291                  }
    292                  else
    293                  {
    294                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
    295                    tempDataLen += (LEN_Token - tempDataLen);
    296                  }
    297          
    298              //If number of bytes read is equal to data length, time to move on to FCS 
    299                  if ( tempDataLen == LEN_Token )
    300                      state = FCS_STATE;
    301          
    302                  break;
    303          
    304                case FCS_STATE:
    305          
    306                  FSC_Token = ch;
    307          
    308                // Make sure it's correct Êý¾ÝÐ£Ñé 
    309                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
    310                  {
    311                    osal_msg_send( App_TaskID, (byte *)pMsg );//°ÑÊý¾Ý°ü·¢ËÍµ½ OSAL ²ã£¬ºÜºÜÖØÒª 
    312                  }
    313                  else
    314                  {
    315                // deallocate the msg 
    316                    osal_msg_deallocate ( (uint8 *)pMsg );//Çå¿ÕÄÚ´æ
    317                  }
    318          
    319               //Reset the state, send or discard the buffers at this point 
    320                  state = SOP_STATE;//×´Ì¬»úÒ»ÖÜÆÚÍê³É
    321          
    322                  break;
    323          
    324                default:
    325                 break;
    326              }
    327            }
    328          }
    329          */
    330          /**************
    331          ¼òµ¥¿´ÁËÒ»ÏÂ´úÂë£¬´®¿Ú´Ó PC »ú½ÓÊÕµ½ÐÅÏ¢»á×öÈçÏÂ´¦Àí£º 
    332          1¡¢ ½ÓÊÕ´®¿ÚÊý¾Ý£¬ÅÐ¶ÏÆðÊ¼ÂëÊÇ·ñÎª 0xFE 
    333          2¡¢ µÃµ½Êý¾Ý³¤¶ÈÈ»ºó¸øÊý¾Ý°ü pMsg ·ÖÅäÄÚ´æ 
    334          3¡¢ ¸øÊý¾Ý°ü pMsg ×°Êý¾Ý 
    335          4¡¢ ´ò°ü³ÉÈÎÎñ·¢¸øÉÏ²ã OSAL ´ý´¦Àí 
    336          5¡¢ ÊÍ·ÅÊý¾Ý°üÄÚ´æ 
    337          
    338          ÎÒÃÇÒª×öµÄÊÇ¼ò»¯ÔÙ¼ò»¯¡£Á÷³Ì±ä³É£º 
    339          1¡¢ ½ÓÊÕµ½Êý¾Ý 
    340          2¡¢ ÅÐ¶Ï³¤¶ÈÈ»ºóÈ»ºó¸øÊý¾Ý°ü pMsg ·ÖÅäÄÚ´æ 
    341          3¡¢ ´ò°ü·¢ËÍ¸øÉÏ²ã OSAL ´ý´¦Àí 
    342          4¡¢ ÊÍ·ÅÄÚ´æ 
    343          Éè¼ÆÈçÏÂµÄº¯Êý
    344          ******************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          void MT_UartProcessZToolData ( uint8 port, uint8 event ) 
   \                     MT_UartProcessZToolData:
    346          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    347            uint8 flag = 0;//flagÅÐ¶ÏÊÇ·ñÊÕµ½Êý¾Ý
   \   00000C   75..00       MOV     ?V0,#0x0
    348            uint8 i,len = 0;//len¼ÇÂ¼Êý¾Ý³¤¶È
   \   00000F   7F00         MOV     R7,#0x0
    349            uint8 buf[128];//´®¿Úbuffer×î´ó»º³åÄ¬ÈÏÎª128
    350              (void)event;  // Intentionally unreferenced parameter
   \   000011   801D         SJMP    ??MT_UartProcessZToolData_0
    351             while(Hal_UART_RxBufLen(port))//¼ì²â´®¿ÚÊý¾ÝÊÇ·ñÍê³É
    352             {
    353               HalUARTRead(port,&buf[len],1);//°ÑÊý¾Ý½ÓÊÕÒ»¸öÒ»¸öµØ·Åµ½bufÖÐ
   \                     ??MT_UartProcessZToolData_1:
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C01         MOV     R4,#0x1
   \   000015   7D00         MOV     R5,#0x0
   \   000017   EF           MOV     A,R7
   \   000018   F8           MOV     R0,A
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E582         MOV     A,DPL
   \   000021   28           ADD     A,R0
   \   000022   FA           MOV     R2,A
   \   000023   E4           CLR     A
   \   000024   3583         ADDC    A,DPH
   \   000026   FB           MOV     R3,A
   \   000027   EE           MOV     A,R6
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??HalUARTRead?relay  ; Banked call to: HalUARTRead
    354               len++;//¼ÇÂ¼×Ö·ûÊý
   \   00002C   0F           INC     R7
    355               flag = 1;//±íÊ¾ÒÑ¾­½Óµ½Êý¾Ý
   \   00002D   75..01       MOV     ?V0,#0x1
    356             }
   \                     ??MT_UartProcessZToolData_0:
   \   000030                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000030   EE           MOV     A,R6
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??Hal_UART_RxBufLen?relay; Banked call to: Hal_UART_RxBufLen
   \   000035   8B..         MOV     ?V3,R3
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V3
   \   00003A   70D7         JNZ     ??MT_UartProcessZToolData_1
    357             if(flag == 1)
   \   00003C   E5..         MOV     A,?V0
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    358             {//·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª½á¹¹ÌåÄÚÈÝ+Êý¾ÝÄÚÈÝ+1¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
    359                pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof(mtOSALSerialData_t) + len + 1);
   \   000043                ; Setup parameters for call to function osal_msg_allocate
   \   000043   EF           MOV     A,R7
   \   000044   2405         ADD     A,#0x5
   \   000046   FA           MOV     R2,A
   \   000047   E4           CLR     A
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00004E   90....       MOV     DPTR,#pMsg
   \   000051   EA           MOV     A,R2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EB           MOV     A,R3
   \   000055   F0           MOVX    @DPTR,A
    360                pMsg->hdr.event = CMD_SERIAL_MSG; //ÊÂ¼þºÅ»¹ÊÇÓÃÔ­À´µÄCMD_SERIAL_MSG
   \   000056   90....       MOV     DPTR,#pMsg
   \   000059   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    361                pMsg->msg = (uint8*)(pMsg+1); // °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
   \   00005F   90....       MOV     DPTR,#pMsg
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2402         ADD     A,#0x2
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F9           MOV     R1,A
   \   00006B   90....       MOV     DPTR,#pMsg
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2404         ADD     A,#0x4
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   3400         ADDC    A,#0x0
   \   000076   FB           MOV     R3,A
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   EA           MOV     A,R2
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   EB           MOV     A,R3
   \   00007F   F0           MOVX    @DPTR,A
    362                pMsg->msg[0] = len;//¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000087   EF           MOV     A,R7
   \   000088   F0           MOVX    @DPTR,A
    363                for(i = 0; i < len; i++)
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   8032         SJMP    ??MT_UartProcessZToolData_3
    364                pMsg->msg[i+1] = buf[i];
   \                     ??MT_UartProcessZToolData_4:
   \   00008D   EA           MOV     A,R2
   \   00008E   F8           MOV     R0,A
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   E582         MOV     A,DPL
   \   000097   28           ADD     A,R0
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   3583         ADDC    A,DPH
   \   00009D   F583         MOV     DPH,A
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C0E0         PUSH    A
   \   0000A2   90....       MOV     DPTR,#pMsg
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FB           MOV     R3,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F583         MOV     DPH,A
   \   0000AB   8B82         MOV     DPL,R3
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   28           ADD     A,R0
   \   0000B1   FB           MOV     R3,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   8B82         MOV     DPL,R3
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   D0E0         POP     A
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   0A           INC     R2
   \                     ??MT_UartProcessZToolData_3:
   \   0000BF   EA           MOV     A,R2
   \   0000C0   C3           CLR     C
   \   0000C1   9F           SUBB    A,R7
   \   0000C2   40C9         JC      ??MT_UartProcessZToolData_4
    365                osal_msg_send( App_TaskID, (byte *)pMsg ); //µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã 
   \   0000C4                ; Setup parameters for call to function osal_msg_send
   \   0000C4   90....       MOV     DPTR,#pMsg
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FB           MOV     R3,A
   \   0000CC   90....       MOV     DPTR,#App_TaskID
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F9           MOV     R1,A
   \   0000D1   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    366                osal_msg_deallocate ( (uint8 *)pMsg ); //ÊÍ·ÅÄÚ´æ 
   \   0000D4                ; Setup parameters for call to function osal_msg_deallocate
   \   0000D4   90....       MOV     DPTR,#pMsg
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    367             }
    368          }
   \                     ??MT_UartProcessZToolData_2:
   \   0000DF   7480         MOV     A,#-0x80
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   7F04         MOV     R7,#0x4
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    369          /**************
    370          ÓÉÉÏÃæ¿ÉÖªÊý¾Ý°üµÄ¸ñÊ½Îª len+data ¾ÍÊÇ Êý¾Ý³¤¶È+Êý¾Ý
    371          
    372          *************/
    373          
    374          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    375          /***************************************************************************************************
    376           * @fn      MT_UartProcessZAppData
    377           *
    378           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    379           *          |  1  |  2   |       1         |  1   |
    380           *
    381           *          Parses the data and determine either is SPI or just simply serial data
    382           *          then send the data to correct place (MT or APP)
    383           *
    384           * @param   port    - UART port
    385           *          event   - Event that causes the callback
    386           *
    387           *
    388           * @return  None
    389           ***************************************************************************************************/
    390          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    391          {
    392          
    393            osal_event_hdr_t  *msg_ptr;
    394            uint16 length = 0;
    395            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    396          
    397            /*
    398               If maxZAppBufferLength is 0 or larger than current length
    399               the entire length of the current buffer is returned.
    400            */
    401            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    402            {
    403              length = MT_UartMaxZAppBufLen;
    404            }
    405            else
    406            {
    407              length = rxBufLen;
    408            }
    409          
    410            /* Verify events */
    411            if (event == HAL_UART_TX_FULL)
    412            {
    413              // Do something when TX if full
    414              return;
    415            }
    416          
    417            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    418            {
    419              if ( App_TaskID )
    420              {
    421                /*
    422                   If Application is ready to receive and there is something
    423                   in the Rx buffer then send it up
    424                */
    425                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    426                {
    427                  /* Disable App flow control until it processes the current data */
    428                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    429          
    430                  /* 2 more bytes are added, 1 for CMD type, other for length */
    431                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    432                  if ( msg_ptr )
    433                  {
    434                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    435                    msg_ptr->status = length;
    436          
    437                    /* Read the data of Rx buffer */
    438                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    439          
    440                    /* Send the raw data to application...or where ever */
    441                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    442                  }
    443                }
    444              }
    445            }
    446          }
    447          
    448          /***************************************************************************************************
    449           * @fn      SPIMgr_ZAppBufferLengthRegister
    450           *
    451           * @brief
    452           *
    453           * @param   maxLen - Max Length that the application wants at a time
    454           *
    455           * @return  None
    456           *
    457           ***************************************************************************************************/
    458          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    459          {
    460            /* If the maxLen is larger than the RX buff, something is not right */
    461            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    462              MT_UartMaxZAppBufLen = maxLen;
    463            else
    464              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    465          }
    466          
    467          /***************************************************************************************************
    468           * @fn      SPIMgr_AppFlowControl
    469           *
    470           * @brief
    471           *
    472           * @param   status - ready to send or not
    473           *
    474           * @return  None
    475           *
    476           ***************************************************************************************************/
    477          void MT_UartAppFlowControl ( bool status )
    478          {
    479          
    480            /* Make sure only update if needed */
    481            if (status != MT_UartZAppRxStatus )
    482            {
    483              MT_UartZAppRxStatus = status;
    484            }
    485          
    486            /* App is ready to read again, ProcessZAppData have to be triggered too */
    487            if (status == MT_UART_ZAPP_RX_READY)
    488            {
    489              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    490            }
    491          
    492          }
    493          
    494          #endif //ZAPP
    495          
    496          /***************************************************************************************************
    497          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MT_UartCalcFCS
      2     29   MT_UartInit
        2     29   -> HalUARTOpen
      1    140   MT_UartProcessZToolData
        0    140   -> HalUARTRead
        0    140   -> Hal_UART_RxBufLen
        0    140   -> osal_msg_allocate
        0    140   -> osal_msg_deallocate
        0    140   -> osal_msg_send
      2      0   MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_UartCalcFCS?relay
       6  ??MT_UartInit?relay
       6  ??MT_UartProcessZToolData?relay
       6  ??MT_UartRegisterTaskID?relay
       7  ?Subroutine0
       9  ?Subroutine1
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      33  MT_UartCalcFCS
     110  MT_UartInit
     233  MT_UartProcessZToolData
      11  MT_UartRegisterTaskID
       2  pMsg
       1  state
       1  tempDataLen

 
 403 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 427 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
